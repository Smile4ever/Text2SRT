' Gambas class file

Public Sub preview()

    Dim syncTime As Float
    Dim playRate As Float
    Dim allTimes As String[]
    
    'Sync
    Dim time1 As String
    Dim time2 As String
    Dim i As Integer
    Dim fixed As String
    Dim cleanPeriod As String
    Dim periodArray As String[]
    
    If txtTime.Text <> Null Then
        syncTime = Val(txtTime.Text)
    Endif
    If txtPlayRate.Text <> Null Then
        playRate = Val(txtPlayRate.Text)
    Endif
   
    allTimes = GetAllTimes()
    
    txtSynced.Text = txtOriginal.Text
    For i = 0 To allTimes.Count - 1
        cleanPeriod = Replace(allTimes[i], " ", "")
        periodArray = Split(cleanPeriod, "-->")
        time1 = periodArray[0]
        time2 = periodArray[periodArray.Length - 1]
        
        If time1 <> ".?." Then
            fixed = AddSyncTime(time1, txtTime.Text)
        Else
            fixed = ".?."
        Endif
        
        fixed &= " --> "
        
        If time2 <> ".?." Then
            fixed &= AddSyncTime(time2, txtTime.Text)
        Else
            fixed &= ".?."
        Endif
        txtSynced.Text = Replace(txtSynced.Text, allTimes[i], fixed)
    Next
End

Public Sub Form_Open()

    txtOriginal.Text = MainWindow.getOutputText()
    If txtTime.Text <> "" Then
        preview()
    Endif
    txtOriginal_Change()
End

Public Sub btnSync_Click()
    
    MainWindow.setOutputText(txtSynced.Text)
    Me.Close
    
End


Public Sub AddSyncTime(timeString As String, timeToAdd As String) As String
    Dim hours As String = TimeCalc.ConvertDecimalTimeToHTime(timeString, True, "h")
    Dim minutes As String = TimeCalc.ConvertDecimalTimeToHTime(timeString, True, "m")
    Dim seconds As String = TimeCalc.ConvertDecimalTimeToHTime(timeString, True, "s")
    
    Dim hoursInt As Integer = Val(hours)
    Dim minutesInt As Integer = Val(minutes)
    Dim secondsInt As Integer = Val(seconds) 'populate for below
    
    Dim secondsMs As String
    Dim milliseconds As Integer
    
    Dim newDate As Date
    Dim intOverflow As Integer
    
    If InStr(timeToAdd, "+") = 1 Then
        secondsInt += Val(Mid(timeToAdd, 2)) 'Skip over +
    Endif
    
    If InStr(timeToAdd, "-") = 1 Then
        secondsInt -= Val(Mid(timeToAdd, 2)) 'Skip over -
    Endif

    secondsMs = Replace(seconds, ",", ".") 'needed for the next
    milliseconds = Val(Mid(secondsMs, InStr(secondsMs, ".") + 1)) 'remove dot, convert to int

    If secondsInt < 0 Then
        secondsInt = 0 'prevent crash
    Endif
    If secondsInt > 59 Then
        intOverflow = secondsInt / 60
        secondsInt = secondsInt % 60
        minutesInt += intOverflow
    Endif
    If minutesInt > 59 Then
        intOverflow = minutesInt / 60
        minutesInt = minutesInt % 60
        hoursInt += intOverflow
    Endif
    
    If hoursInt > 23 Then
        Return 'not supported
    Endif

    newDate = Date(Year(Now), Month(Now), Day(Now), hoursInt, minutesInt, secondsInt, milliseconds)
    
    'Message("hours " & hoursInt & "minutes" & minutesInt & "seconds" & secondsInt)
    Return TimeCalc.getTime(newDate)
End


Public Sub GetAllTimes() As String[]
    
  Dim i As Integer
  Dim everything As String[]
  Dim allTimes As New String[]
  
  everything = Split(txtOriginal.Text, "\n")
  
  For i = 0 To everything.Count - 1
      If InStr(everything[i], "-->") Then
          allTimes.Add(everything[i])
      Endif
  Next
    Return allTimes
End


Public Sub txtTime_Change()

    If Len(txtTime.Text) > 1 Then
        If InStr(txtTime.Text, "+") = 1 Then
            lblType.Text = Val(Mid(txtTime.Text, 2)) & " sec slower"
        Else
            If InStr(txtTime.Text, "-") = 1 Then
                lblType.Text = Val(Mid(txtTime.Text, 2)) & " sec faster"
            Endif
        Endif
        If Val(txtTime.Text) > (60 * 60 * 24) - 1 Then
            MainWindow.ShowMessage("24 hours and more is not supported (max " & ((60 * 60 * 24) - 1) & " sec)", "Not supported")
            
        Else
             preview()
        Endif
       
    Endif
    If Len(txtTime.Text) == 1 Or Len(txtTime.Text) == 0 Then
        txtSynced.Text = txtOriginal.Text
        lblType.Text = ""
    Endif
End

Public Sub inputTextChanged(inputText As String)
    
  txtOriginal.Text = inputText  
  preview()
    
End


Public Sub txtOriginal_Change()

    If txtOriginal.Text == "" Then
        btnSync.Visible = False
        MainWindow.ShowMessage("Make sure you have text in the SRT output text box. The SRT output text box is the text box on the right in the main window.")
    Else
        btnSync.Visible = True
    Endif

End
