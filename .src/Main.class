' Gambas class file

Public lineCounter As Integer = 0
Public startTime As Date
Public emptyLineCounter As Integer = 0
Public emptyInputLineCounter As Integer = 0
Public filename As String
Public strCommand As String
Public boundary As Integer = 15
Public pauseTimeStart As Date
Public timePassed As Date
Public halfasecond As Date

Public Sub _new()
    
End

Public Sub Form_Open()
    
    ReloadConfiguration()
    
End

Public Sub ReloadConfiguration()
    
    'Dim i As Integer
    
    UpdateButtons()
    UpdatePlayers()
    hsplit1.Layout = [45, 55]
    
    'For i = 0 To cmbPlayers.List.Count - 1
    '    If cmbPlayers[i].Text = "mpv" Then 'player-resumer
    '        cmbPlayers.Index = i
    '    Endif
    'Next
    cmbPlayers.Index = 0
    
End

Public Sub UpdateButtons()
    
    If rdbMovieManual.Value = True Or rdbLyricsManualPaste.Value = True Then
        btnPasteText.Enabled = True
    Else
        'Auto paste
        btnPasteText.Enabled = False
    Endif
    
End

Public Sub CleanInputText(inputText As String) As String[]
    
    Dim strInputTextClean As String = Replace(inputText, "\n\n", "\n")
    Dim lyricsCleanArray As String[] = Split(strInputTextClean, "\n")
    Dim lyricsCleanArrayCleanest As New String[]
    
    Dim i As Integer = 0
    
    For i = 0 To lyricsCleanArray.Count - 1
        If Trim(lyricsCleanArray[i]) <> "" Then
            lyricsCleanArrayCleanest.Add(lyricsCleanArray[i])
        Endif
    Next
    Return lyricsCleanArrayCleanest
    
End

Public Sub AddSRTItem()
    
    Dim srtItem As String
    Dim strTime As Date = WhereWereWe()
    Dim lyricsCleanArray As String[] = CleanInputText(txtInputText.Text)
    Dim strSecondTime As String = ".?."
    
    DebugSRT.Log("We are now at " & strTime & " if we may believe the function WhereWereWe")
    DebugSRT.Log("TimeCalc.getTime() calculates " & TimeCalc.getTime(strTime) & " for " & strTime)
       
    If lineCounter < lyricsCleanArray.Count Then
        txtSRT.Text = Replace(txtSRT.Text, strSecondTime, TimeCalc.getTime(strTime))
        If lineCounter + 1 == lyricsCleanArray.Count Then
            DebugSRT.Log("For the end time, TimeCalc.ConvertHTimeToDecimal calculates " & TimeCalc.ConvertHTimeToDecimal(txtLength.Text))
            strSecondTime = TimeCalc.ConvertHTimeToDecimal(txtLength.Text) & ",000"
        End If

        srtItem = (lineCounter + 1) & "\n" & TimeCalc.getTime(strTime) & " --> " & strSecondTime & "\n" & lyricsCleanArray[lineCounter]
        txtSRT.Text &= srtItem & "\n\n"

        lineCounter += 1
        If lineCounter == lyricsCleanArray.Count Then
            StopRecording()
        Else
            UpdateNextUp()
        End If
        ScrollDown(lineCounter - 1)
    End If

End

Public Function PausedTimePassed() As Date
    
    Return Now - pauseTimeStart
    
End

Public Function WhereWereWe() As Date
    
    Return Now - startTime - timePassed
    
End

Public Sub ScrollDown(lineCounter As Integer)
    Dim countLines As Integer
    
    If Trim(Split(txtInputText.Text, "\n")[lineCounter]) == "" Then
       emptyInputLineCounter += 1
    Endif
    
    countLines = Split(txtSRT.Text, "\n").Count
    txtSRT.Line = countLines + 1
    countLines = Split(txtInputText.Text, "\n").Count
    
    If lineCounter + emptyInputLineCounter + 3 <> countlines Then
        txtInputText.Line = lineCounter + emptyInputLineCounter + 2 'See next
    Endif
End


Public Sub btnAddPause_Click()
    
    'Dim srtItem As String
    Dim strLyricsClean As String = Replace(txtInputText.Text, "\n\n", "\n")
    Dim strTime As Date = WhereWereWe()
    
    Dim lyricsCleanArray As String[] = Split(strLyricsClean, "\n")
    Dim strSecondTime As String = ".?."
     
    If lineCounter < lyricsCleanArray.Count Then
        txtSRT.Text = Replace(txtSRT.Text, strSecondTime, TimeCalc.getTime(strTime))
        If lineCounter + 1 == lyricsCleanArray.Count Then
            'strSecondTime = "00:" & TimeCalc.ConvertHTimeToDecimal(txtLength.Text) & ",000"
            Return
        End If
        ScrollDown(lineCounter)
    End If
    
End

Public Sub btnAddLine_Click()
    
    If btnAddLine.Text = "Add line" Then
        AddSRTItem()
    Else
        'Save file
        Dialog.Title = "Save SRT file as.."
        Dialog.Filter = ["*.srt", "SubRip (SRT) file"]
        
        If Dialog.SaveFile() Then Return
        
        File.Save(Dialog.Path, txtSRT.Text)
        Shell "notify-send 'SRT file saved to' '" & Dialog.Path & "' --icon=dialog-information"
    Catch
        Message.Info(Error.Text)
    End If
    
End

Public Sub Form_Resize()

    Dim minHeight As Integer = 70
    
    txtSRT.Height = Main.Height - minHeight
    txtInputText.Height = Main.Height - minHeight
    optionsPanel.Height = Main.Height - minHeight
    HSplit1.Height = Main.Height - minHeight

    btnHelp.Text = "Help and usage"
    btnHelp.Width = 192
    btnHelp.Visible = True
    optionsPanel.Visible = True
    optionsPanel.Width = 320
    btnHelp.Visible = True
    lblNextLine.Visible = True
    lblNextUp.Visible = True
    btnOptions.Visible = False

    If Main.Width < 900 Then
        btnHelp.Width = 60
        btnHelp.Text = "Help"
        btnAddPause.X = Main.Width - 210 - btnHelp.Width
        btnAddLine.X = Main.Width - 120 - btnHelp.Width  '       
            '
        If Main.Width < 800 Then
            btnHelp.Visible = False
            btnAddPause.X = Main.Width - 190
            btnAddLine.X = Main.Width - 100
        Endif

        If Main.Width < 550 Then
            lblNextUp.Visible = False
            lblNextLine.Visible = False
            btnOptions.Visible = True
        Endif
    Else
        btnAddPause.X = Main.Width - btnAddLine.Width - btnAddLine.Width - optionsPanel.Width
        btnAddLine.X = Main.Width - btnAddLine.Width - optionsPanel.Width
    Endif

    optionsPanel.Left = Main.Width - optionsPanel.Width
    btnHelp.Left = Main.Width - btnHelp.Width - 20
    hsplit1.Width = Main.Width - optionsPanel.Width - 20
    
End

Public Function StartIsValid() As Boolean
    
    Dim intMinuteLength As Integer
    
    If txtLength.Text = "" Then
        Message("Length is required. For more information, see Help and Usage.")
        Return False
    End If
    
    intMinuteLength = Val(TimeCalc.ConvertHTimeToDecimal(txtLength.Text, False, "m"))
    If intMinuteLength < boundary Then
        'Lyrics code
        If rdbLyricsAutoPaste.Value = True Then
            txtInputText.Text = Clipboard.Paste("text/plain")
            If txtInputText.Text = "" Then
                Message("Clipboard is empty")
                Return False
            Endif
            Return True
        Endif
        If rdbLyricsSearch.Value = True Then
            'search lyrics here
            Lyrics.init()
            txtInputText.Text = Lyrics.get_lyrics()
            If txtInputText.Text = "" Then
                Message("Lyrics not found with automatic searching. Try the auto paste or manual mode.")
                Return False
            End If
            Return True
        Endif
        If txtInputText.Text = "" Then
            Message("The input text cannot be empty. Enabling auto paste from clipboard can reduce the number of steps needed to generate an SRT file. For more information, see Help and Usage.")
            Return False
        Endif
    Else
        'Movie code
        If rdbMoviePasteText.Value == True Then
            txtInputText.Text = Clipboard.Paste("text/plain")
            If txtInputText.Text = "" Then
                Message("Clipboard is empty")
                Return False
            Endif
            Return True
        Endif
    Endif
    
    Return True
    
End

Public Sub btnStart_Click()
    
    Dim strOptions As String
    Dim timeNow As Date
    
    If StartIsValid() Then
        If strCommand == "mpv" Then
            strOptions = " --osd-level=2"
        Endif
        cmbPlayers_Change()
        Shell "pkill " & strCommand
        Wait 0.01
        Shell strCommand & strOptions & " \"" & Dialog.Path & "\""
        halfasecond = Time(Now)
        Wait 0.5
        timenow = Time(Now)
        halfasecond = timenow - halfasecond
        Main.Text = "Text2SRT [Recording " & filename & "]"
        txtSRT.Text = ""
        lineCounter = 0
        startTime = timenow
        
        DebugSRT.Log("The start time is " & timenow)
        
        btnPause.Text = "Pause"
        btnAddLine.Enabled = True
        btnAddPause.Enabled = True
        btnAddLine.Text = "Add line"
        btnStart.Text = "Restart"
        emptyInputLineCounter = 0
        btnAddPause.Enabled = True
        UpdateNextUp()
        
    End If
    
End

Public Sub UpdateNextUp()
    'Dim cleanInputText As String[]
    'cleanInputText = CleanInputText(txtInputText.Text)
    'If cleanInputText <> Null Then
    '    lblNextLine.Text = cleanInputText[lineCounter + 1]  
    'Else
    '    lblNextLine.Text = ""
    'Endif
    lblNextLine.Text = CleanInputText(txtInputText.Text)[lineCounter]
End

Public Sub btnHelp_Click()
    
    Help.Show()
    
End

Public Sub btnPasteText_Click()
    
    txtInputText.Text = Clipboard.Paste()
    
End

Public Sub btnOpen_Click()
    
    Dim strFileSize As String
    Dim path As String
    Dim strProgram As String
    
    Dialog.Title = "Open video file.."
    Dialog.Filter = ["*.*", "Video files with audio"]
    
    If Dialog.OpenFile() Then Return
    Shell "which ffmpeg" To path
    If path == "" Then
        Shell "which avconv" To path
        If path == "" Then
            Message("You need to install ffmpeg or libav-tools")
            Return
        Else
            strProgram = "avconv"
        Endif
    Else
        strProgram = "ffmpeg"
    Endif
    Shell strProgram & " -i \"" & Dialog.Path & "\" 2>&1 | grep Duration | cut -d ' ' -f 4 | sed s/,//" To strFileSize
    DebugSRT.Log("------------------------------------------")
    DebugSRT.Log("Opened the file " & Dialog.Path)
    DebugSRT.Log("The program " & strProgram & " has calculated the length " & strFileSize)
    txtLength.Text = Mid(strFileSize, 1, 8)
    filename = Dialog.Path
    
    btnStart_Click()
    
Catch
    Message.Info(Error.Text)
    
End

Public Sub moviesgroup_Click()
    
    UpdateButtons()
    
End

Public Sub IsInstalled(strPlayer As String) As Boolean
    
    Dim path As String
    
    Shell "which " & strPlayer To path  
    If path <> "" Then
        Return True
    Endif
    Return False
    
End

Public Function SupportedPlayers() As String[]
    'Amarok is not yet supported as it requires a smarter wait time
    'Clementine is not yet supported as it requires a smarter wait time
    'Dragon is not yet supported as it requires a smarter wait time
    'lollypop (gnome player) is not yet supported as it requires a smarter wait time (at least the first time)
    'Cantata is not supported.
    'MPlayer is not supported. See:
    'http://ubuntuforums.org/showthread.php?t=2213319
    'http://marc.info/?l=mplayer-users&m=134998152225053&w=2
    
    'Audacious works very well
    'Guayadeque works very well
    'Kaffeine works very well
    'VLC Media Player works very well
    
    'mplayer-resumer might become supported in the future
    
    Return ["System default", "Audacious", "Audience", "DeaDBeeF", "GNOME MPlayer", "GNOME Videos (Totem)", "Guayadeque", "kaffeine", "Noise Player", "mpv", "SMPlayer", "VLC Media Player", "xnoise"]
    
End

Public Function SupportedPlayersExecutables() As String[]
    
    Return ["xdg-open", "audacious", "audience", "deadbeef", "gnome-mplayer", "totem", "guayadeque", "kaffeine", "noise-player", "mpv", "smplayer", "vlc", "xnoise"]
    
End

Public Sub UpdatePlayers()
    
    Dim arrstrPlayers As String[] = SupportedPlayers()
    Dim arrstrPlayersExecutable As String[] = SupportedPlayersExecutables()
    Dim i As Integer
    
    cmbPlayers.Clear()
    
    For i = 0 To arrstrPlayersExecutable.Count - 1
        If IsInstalled(arrstrPlayersExecutable[i]) Then
            cmbPlayers.Add(arrstrPlayers[i])
        Endif
    Next
    
End

Public Sub cmbPlayers_Change()
    
    Dim path As String
    Dim arrstrPlayers As String[] = SupportedPlayers()
    Dim arrstrPlayersExecutable As String[] = SupportedPlayersExecutables()
    Dim i As Integer
    Dim mimetype As String
    Dim pathToDesktopFile As String
    Dim isSet As Boolean = False
    
    For i = 0 To arrstrPlayers.Count - 1
        If cmbPlayers.Text = arrstrPlayers[i] Then
            If arrstrPlayersExecutable[i] == "xdg-open" Then
                
                Shell "xdg-mime query filetype \"" & Main.filename & "\"" To mimetype
                Shell "xdg-mime query default " & mimetype To pathToDesktopFile
                If InStr(pathToDesktopFile, "mpv") > 0 Then
                    strCommand = "mpv"
                    isSet = True
                Endif
                If InStr(pathToDesktopFile, "vlc") > 0 Then
                    strCommand = "vlc"
                    isSet = True
                Endif
                If isSet == False Then
                    strCommand = "xdg-open" 'TODO: fix this (cannot kill xdg-open) can be fixed by reading the desktop file
                Endif
            Else
                strCommand = arrstrPlayersExecutable[i]
            End If
            
            Return
        Endif
    Next
    'audience requires ubuntu-restricted-extras to play MP4 files
    'TODO: inform the user of this (if lsb_release is ubuntu)"
    
    'Custom player (path to binary) is supported too
    Shell "which " & cmbPlayers.Text To path
    If path <> "" Then
        strCommand = cmbPlayers.Text
    End If
    
End

Public Sub lyricsgroup_Click()
    
    UpdateButtons()
    
End

Public Sub spinBoundary_Change()
    
    lblMovies.Text = "Movies (>" & spinBoundary.Value & "min)"
    lblMusicVideos.Text = "Music videos (<" & spinBoundary.Value & "min)"
    boundary = spinBoundary.Value
    
End

Public Sub btnReloadConfiguration_Click()
    
    ReloadConfiguration()
    Shell "notify-send 'Text2SRT' 'Configuration reloaded' --icon=dialog-information"
    
End

Public Sub btnPause_Click()
    
    'Shell "file --mime-type \"" & Main.filename & "\"" To mimetype
    
    If strCommand == "mpv" Or strCommand == "vlc" Then
        If InStr(btnPause.Text, "PAUSED") > 0 Then
            btnPause.Text = "Pause"
            btnAddLine.Enabled = True
            btnAddPause.Enabled = True
            
            If strCommand == "vlc" Then
                'This will be inaccurate for MPEG-PS, see https://trac.videolan.org/vlc/ticket/6705
                'start half a second earlier to compensate for the startup time of VLC
                Shell "vlc" & " --start-time=" & TimeCalc.getSeconds(Split(TimeCalc.getTime(WhereWereWe() - halfasecond), ",")[0]) & " \"" & Dialog.Path & "\""
            Endif
            If strCommand == "mpv" Then
                Shell "mpv" & " --osd-level=2 --start=" & Split(TimeCalc.getTime(WhereWereWe() - halfasecond), ",")[0] & " \"" & Dialog.Path & "\""
            Endif
            timePassed += PausedTimePassed() ' + 90 'Second and a half
        Else
            pauseTimeStart = Now
            btnPause.Text = "PAUSED at " & Split(TimeCalc.getTime(WhereWereWe()), ",")[0]
            btnAddLine.Enabled = False
            btnAddPause.Enabled = False
            Shell "pkill " & strCommand
        Endif
    Else
        Message("This option can only be used with mpv or VLC Media Player. Please set mpv or VLC Media Player as your player.")
    Endif
    
End

Public Function ShowMessage(text As String, Optional title As String = "Text2SRT")
    
    Shell "notify-send '" & title & "' '" & text & "' --icon=dialog-information"  
    
End

Public Sub btnTooEarly_Click()

    Dim lastIndex As Integer = RInStr(txtSRT.Text, "-->")
    Dim lastTime As String = Mid(txtSRT.Text, lastIndex - 13, 12)
    
    txtSRT.Text = Replace(txtSRT.Text, lastTime, TimeCalc.getTime(WhereWereWe()))
    ScrollDown(lineCounter)
End

Public Sub StopRecording()
    
    Main.Text = "Text2SRT"
    btnAddLine.Text = "Save SRT"
    btnStart.Text = "Start"
    btnAddPause.Enabled = False
    lblNextLine.Text = ""
    
End


Public Sub btnStopRecording_Click()

    StopRecording()
    txtSRT.Text = Replace(txtSRT.Text, ".?.", TimeCalc.getTime(TimeCalc.ConvertHTimeToDecimal(txtLength.Text)))
    Shell "pkill " & strCommand
End

Public Sub btnOptions_Click()

    optionsPanel.Visible = Not optionsPanel.Visible
    If optionsPanel.Visible Then
        optionsPanel.Width = Main.Width - 20
        optionsPanel.X = 10
        hsplit1.Width = 0
    Else
        hsplit1.Width = Main.Width - 20
        optionsPanel.Width = 0
    Endif
End

Public Sub Form_KeyRelease()

    If Key.Code = Key.F12 Then
        DebugSRT.Show()
    Endif

End
