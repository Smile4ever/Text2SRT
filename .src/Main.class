' Gambas class file

Public lineCounter As Integer = 0
Public startTime As Date
Public emptyLineCounter As Integer = 0
Public filename As String
Public strCommand As String
Public boundary As Integer = 15

Public Sub _new()

End

Public Sub Form_Open()
    ReloadConfiguration()
End

Public Sub ReloadConfiguration()
    
    UpdateButtons()
    UpdatePlayers()
    cmbPlayers.Index = 0
    
End


Public Sub UpdateButtons()
    
    If rdbMovieManual.Value = True Or rdbLyricsManualPaste.Value = True Then
        btnPasteText.Visible = True
    Else
         'Auto paste
        btnPasteText.Visible = False
    Endif
    
End


Public Sub AddSRTItem()
    
    Dim srtItem As String
    Dim strLyricsClean As String = Replace(txtInputText.Text, "\n\n", "\n")
    Dim strTime As Date = Now - startTime
    Dim lyricsCleanArray As String[] = Split(strLyricsClean, "\n")
    Dim strSecondTime As String = ".?."
    
    If lineCounter < lyricsCleanArray.Count Then
        'txtSRT.Text = Replace(txtSRT.Text, "{{NEXT}}", TimeCalc.getTime(strTime))
        
        txtSRT.Text = Replace(txtSRT.Text, strSecondTime, TimeCalc.getTime(strTime))
        If lineCounter + 1 == lyricsCleanArray.Count Then
            strSecondTime = "00:" & TimeCalc.ConvertHTimeToDecimal(txtLength.Text) & ",000"
        End If
        srtItem = (lineCounter + 1) & "\n" & TimeCalc.getTime(strTime) & " --> " & strSecondTime & "\n" & Split(strLyricsClean, "\n")[lineCounter]
        txtSRT.Text &= srtItem & "\n\n"
       
        If lineCounter + 1 == lyricsCleanArray.Count Then
            'btnTime.Enabled = False
            Main.Text = "Text2SRT"
            btnTime.Text = "Save SRT"
            btnStart.Text = "Start"
            btnInsertEmpty.Enabled = False
        End If
        lineCounter = lineCounter + 1

        txtSRT.Line = 4 * (lineCounter + emptyLineCounter + 1)
        txtInputText.Line = lineCounter + emptyLineCounter + 1

    End If
End

Public Sub btnInsertEmpty_Click()

    Dim srtItem As String
    Dim strLyricsClean As String = Replace(txtInputText.Text, "\n\n", "\n")
    Dim strTime As Date = Now - startTime
    Dim lyricsCleanArray As String[] = Split(strLyricsClean, "\n")
    Dim strSecondTime As String = ".?."
    
    If lineCounter < lyricsCleanArray.Count Then
        txtSRT.Text = Replace(txtSRT.Text, strSecondTime, TimeCalc.getTime(strTime))
        If lineCounter + 1 == lyricsCleanArray.Count Then
             'strSecondTime = "00:" & TimeCalc.ConvertHTimeToDecimal(txtLength.Text) & ",000"
             Return
        End If
       
        emptyLineCounter = emptyLineCounter + 1

        txtSRT.Line = 4 * (lineCounter + emptyLineCounter + 1)
        txtInputText.Line = lineCounter + emptyLineCounter + 1

    End If

End

Public Sub btnTime_Click()

    If btnTime.Text = "Add line" Then
        AddSRTItem()
    Else
        'Save file
          Dialog.Title = "Save SRT file as.."
          Dialog.Filter = ["*.srt", "SubRip (SRT) file"]
        
          If Dialog.SaveFile() Then Return
          
          File.Save(Dialog.Path, txtSRT.Text)
          Shell "notify-send 'SRT file saved to' '" & Dialog.Path & "' --icon=dialog-information"
        Catch
          Message.Info(Error.Text)
    End If

End

Public Sub Form_Resize()

    txtSRT.Height = Main.Height - 70
    txtInputText.Height = Main.Height - 70
    optionsPanel.Height = Main.Height - 70
    optionsPanel.Left = Main.Width - optionsPanel.Width
    btnHelp.Left = Main.Width - btnHelp.Width - 20
End

Public Function StartIsValid() As Boolean
     Dim intMinuteLength As Integer
     
    If txtLength.Text = "" Then
        Message("Length is required. For more information, see Help and Usage.")
        Return False
    End If
   
    intMinuteLength = Val(TimeCalc.ConvertHTimeToDecimal(txtLength.Text, False, "m"))
    If intMinuteLength < boundary Then
        'Lyrics code
       If rdbLyricsAutoPaste.Value = True Then
            txtInputText.Text = Clipboard.Paste("text/plain")
            If txtInputText.Text = "" Then
                Message("Clipboard is empty")
                Return False
            Endif
            Return True
       Endif
       If rdbLyricsSearch.Value = True Then
           'search lyrics here
           Lyrics.init()
           txtInputText.Text = Lyrics.get_lyrics()
           If txtInputText.Text = "" Then
               Message("Lyrics not found with automatic searching. Try the auto paste or manual mode.")
               Return False
           End If
           Return True
       Endif
       If txtInputText.Text = "" Then
           Message("The input text cannot be empty. Enabling auto paste from clipboard can reduce the number of steps needed to generate an SRT file. For more information, see Help and Usage.")
           Return False
       Endif
    Else
        'Movie code
        If rdbMoviePasteText.Value == True Then
            txtInputText.Text = Clipboard.Paste("text/plain")
            If txtInputText.Text = "" Then
                Message("Clipboard is empty")
                Return False
            Endif
            Return True
        Endif
    Endif

    Return True
End


Public Sub btnStart_Click()

    If StartIsValid() Then
        Shell strCommand & " \"" & Dialog.Path & "\""
        Wait 0.5
        Main.Text = "Text2SRT [Recording " & filename & "]"
        txtSRT.Text = ""
        lineCounter = 0
        startTime = Time(Now)
        btnTime.Text = "Add line"
        btnStart.Text = "Restart"
        btnInsertEmpty.Enabled = True
    End If
End

Public Sub btnHelp_Click()

    Help.Show()

End

Public Sub btnPasteText_Click()

    txtInputText.Text = Clipboard.Paste()

End

Public Sub btnOpen_Click()
     Dim strFileSize As String
     Dim artist_x As String
     Dim title_x As String
     Dim path As String
     Dim strProgram As String
     
     Dialog.Title = "Open video file.."
     Dialog.Filter = ["*.*", "Video files with audio"]

     If Dialog.OpenFile() Then Return
        Shell "which ffmpeg" To path
        If path == "" Then
            Shell "which avconv" To path
            If path == "" Then
                Message("You need to install ffmpeg or libav-tools")
                Return
            Else
                strProgram = "avconv"
            Endif
        Else
            strProgram = "ffmpeg"
        Endif
        Shell strProgram & " -i \"" & Dialog.Path & "\" 2>&1 | grep Duration | cut -d ' ' -f 4 | sed s/,//" To strFileSize
        txtLength.Text = Mid(strFileSize, 1, 8)
        filename = Dialog.Path
       
        btnStart_Click()

     Catch
       Message.Info(Error.Text)

End


Public Sub moviesgroup_Click()

    UpdateButtons()

End

Public Sub IsInstalled(strPlayer As String) As Boolean
  
   Dim path As String
   Shell "which " & strPlayer To path  
   If path <> "" Then
       Return True
   Endif
   Return False
   
End

Public Function SupportedPlayers() As String[]
    'Amarok is not yet supported as it requires a smarter wait time
    'Clementine is not yet supported as it requires a smarter wait time
    'Dragon is not yet supported as it requires a smarter wait time
    'lollypop (gnome player) is not yet supported as it requires a smarter wait time (at least the first time)
    'Cantata is not supported.
    'MPlayer is not supported.
    
    'Audacious works very well
    'Guayadeque works very well
    'Kaffeine works very well
    'VLC Media Player works very well
    
    Return ["System default", "Audacious", "Audience", "DeaDBeeF", "GNOME MPlayer", "GNOME Videos (Totem)", "Guayadeque", "kaffeine", "Noise Player", "mpv", "SMPlayer", "VLC Media Player", "xnoise"]
    
End

Public Function SupportedPlayersExecutables() As String[]
    
    Return ["xdg-open", "audacious", "audience", "deadbeef", "gnome-mplayer", "totem", "guayadeque", "kaffeine", "noise-player", "mpv", "smplayer", "vlc", "xnoise"]
    
End


Public Sub UpdatePlayers()
    Dim arrstrPlayers As String[] = SupportedPlayers()
    Dim arrstrPlayersExecutable As String[] = SupportedPlayersExecutables()
    Dim i As Integer
    
    cmbPlayers.Clear()
    
    For i = 0 To arrstrPlayersExecutable.Count - 1
        If IsInstalled(arrstrPlayersExecutable[i]) Then
            cmbPlayers.Add(arrstrPlayers[i])
        Endif
    Next
End


Public Sub cmbPlayers_Change()
    Dim path As String
    Dim arrstrPlayers As String[] = SupportedPlayers()
    Dim arrstrPlayersExecutable As String[] = SupportedPlayersExecutables()
    Dim i As Integer
    
    For i = 0 To arrstrPlayers.Count - 1
        If cmbPlayers.Text = arrstrPlayers[i] Then
            strCommand = arrstrPlayersExecutable[i]
            Return
        Endif
    Next
    'audience requires ubuntu-restricted-extras to play MP4 files
    'TODO: inform the user of this (if lsb_release is ubuntu)"
   
    Shell "which " & cmbPlayers.Text To path
    If path <> "" Then
        strCommand = cmbPlayers.Text
    End If

End


Public Sub lyricsgroup_Click()

    UpdateButtons()

End

Public Sub spinBoundary_Change()
    lblMovies.Text = "Movies (>" & spinBoundary.Value & "min)"
    lblMusicVideos.Text = "Music videos (<" & spinBoundary.Value & "min)"
    boundary = spinBoundary.Value

End

Public Sub btnReloadConfiguration_Click()

    ReloadConfiguration()
    Shell "notify-send 'Text2SRT' 'Configuration reloaded' --icon=dialog-information"

End
